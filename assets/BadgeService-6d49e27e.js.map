{"version":3,"file":"BadgeService-6d49e27e.js","sources":["../../src/services/BadgeService.ts"],"sourcesContent":["// src/services/BadgeService.ts\nimport type { OB2, OB3, Shared } from '@/types';\nimport { v4 as uuidv4 } from 'uuid';\nimport { createIRI, isOB2Assertion, isOB3VerifiableCredential } from '@utils/type-helpers';\n\n/**\n * Utility service for badge-related operations\n */\nexport class BadgeService {\n  /**\n   * Creates a new BadgeClass template with default values\n   */\n  static createBadgeClassTemplate(): OB2.BadgeClass {\n    const id = createIRI(`urn:uuid:${uuidv4()}`);\n    const emptyImage = {\n      id,\n      type: 'Image',\n    } as OB2.Image;\n    return {\n      '@context': 'https://w3id.org/openbadges/v2',\n      id,\n      type: 'BadgeClass',\n      name: '',\n      description: '',\n      image: emptyImage,\n      criteria: { narrative: '' },\n      issuer: {\n        id,\n        type: 'Profile',\n        name: '',\n      },\n    };\n  }\n\n  /**\n   * Creates a new Assertion template with default values\n   */\n  static createAssertionTemplate(\n    badgeClass: OB2.BadgeClass,\n    recipientEmail: string\n  ): OB2.Assertion {\n    const id = `urn:uuid:${uuidv4()}` as Shared.IRI;\n    const now = new Date().toISOString() as Shared.DateTime;\n    return {\n      '@context': 'https://w3id.org/openbadges/v2',\n      id,\n      type: 'Assertion',\n      recipient: {\n        identity: recipientEmail,\n        type: 'email',\n        hashed: false,\n      },\n      badge: badgeClass,\n      issuedOn: now,\n      verification: {\n        type: 'hosted',\n      },\n    };\n  }\n\n  /**\n   * Validates a BadgeClass object\n   * @returns Array of validation errors, empty if valid\n   */\n  static validateBadgeClass(badgeClass: OB2.BadgeClass): string[] {\n    const errors: string[] = [];\n\n    if (!badgeClass.id) {\n      errors.push('Badge ID is required');\n    }\n    if (!badgeClass.name) {\n      errors.push('Badge name is required');\n    }\n    if (!badgeClass.description) {\n      errors.push('Badge description is required');\n    }\n    if (!badgeClass.image) {\n      errors.push('Badge image is required');\n    }\n    if (!badgeClass.issuer) {\n      errors.push('Issuer is required');\n    }\n    if (typeof badgeClass.issuer === 'object' && !badgeClass.issuer.name) {\n      errors.push('Issuer name is required');\n    }\n\n    return errors;\n  }\n\n  /**\n   * Validates an Assertion object\n   * @returns Array of validation errors, empty if valid\n   */\n  static validateAssertion(assertion: OB2.Assertion): string[] {\n    const errors: string[] = [];\n\n    if (!assertion.id) {\n      errors.push('Assertion ID is required');\n    }\n    if (!assertion.badge) {\n      errors.push('Badge reference is required');\n    }\n    if (!assertion.issuedOn) {\n      errors.push('Issue date is required');\n    }\n    if (!assertion.recipient?.identity) {\n      errors.push('Recipient identity is required');\n    }\n\n    return errors;\n  }\n\n  /**\n   * Normalizes a badge object (either OB2 or OB3) to a common format for display\n   */\n  static normalizeBadge(badge: OB2.Assertion | OB3.VerifiableCredential): {\n    id: string;\n    name: string;\n    description: string;\n    image: string;\n    issuer: {\n      name: string;\n      url?: string;\n      image?: string;\n    };\n    issuedOn: string;\n    expires?: string;\n  } {\n    if (isOB2Assertion(badge)) {\n      // Handle OB2 Assertion\n      const badgeClass =\n        typeof badge.badge === 'string'\n          ? { name: 'Unknown Badge', description: '', image: '' }\n          : badge.badge;\n\n      // Handle issuer which could be a string or Profile object\n      let issuerName = 'Unknown Issuer';\n      let issuerUrl: string | undefined;\n      let issuerImage: string | undefined;\n\n      if (typeof badgeClass === 'object' && 'issuer' in badgeClass) {\n        if (typeof badgeClass.issuer === 'string') {\n          // Issuer is a string reference\n          issuerName = 'Unknown Issuer';\n        } else if (typeof badgeClass.issuer === 'object') {\n          // Issuer is a Profile object\n          issuerName = badgeClass.issuer.name;\n          issuerUrl = typeof badgeClass.issuer.url === 'string' ? badgeClass.issuer.url : undefined;\n\n          if (badgeClass.issuer.image) {\n            if (typeof badgeClass.issuer.image === 'string') {\n              issuerImage = badgeClass.issuer.image;\n            } else if (\n              typeof badgeClass.issuer.image === 'object' &&\n              'id' in badgeClass.issuer.image\n            ) {\n              issuerImage = badgeClass.issuer.image.id as string;\n            }\n          }\n        }\n      }\n\n      // Handle image which could be a string or Image object\n      let badgeImage = '';\n      if (typeof badgeClass === 'object' && 'image' in badgeClass) {\n        if (typeof badgeClass.image === 'string') {\n          badgeImage = badgeClass.image;\n        } else if (typeof badgeClass.image === 'object' && 'id' in badgeClass.image) {\n          badgeImage = badgeClass.image.id as string;\n        }\n      }\n\n      return {\n        id: badge.id as string,\n        name:\n          typeof badgeClass === 'object' && 'name' in badgeClass\n            ? badgeClass.name\n            : 'Unknown Badge',\n        description:\n          typeof badgeClass === 'object' && 'description' in badgeClass\n            ? badgeClass.description\n            : '',\n        image: badgeImage,\n        issuer: {\n          name: issuerName,\n          url: issuerUrl,\n          image: issuerImage,\n        },\n        issuedOn: badge.issuedOn as string,\n        expires: badge.expires as string | undefined,\n      };\n    } else if (isOB3VerifiableCredential(badge)) {\n      // Handle OB3 VerifiableCredential\n      const achievement = badge.credentialSubject.achievement;\n      const issuer = badge.issuer;\n\n      // Handle achievement name which could be a string or array\n      let achievementName = 'Unknown Badge';\n      if (typeof achievement === 'object') {\n        if (Array.isArray(achievement)) {\n          // If achievement is an array, use the first one's name\n          if (achievement.length > 0 && 'name' in achievement[0]) {\n            const name = achievement[0].name;\n            achievementName = typeof name === 'string' ? name : 'Unknown Badge';\n          }\n        } else if ('name' in achievement) {\n          // Single achievement object\n          const name = achievement.name;\n          if (typeof name === 'string') {\n            achievementName = name;\n          } else if (Array.isArray(name) && name.length > 0) {\n            achievementName = typeof name[0] === 'string' ? name[0] : 'Unknown Badge';\n          }\n        }\n      }\n\n      // Handle achievement description\n      let achievementDescription = '';\n      if (\n        typeof achievement === 'object' &&\n        !Array.isArray(achievement) &&\n        'description' in achievement\n      ) {\n        const description = achievement.description;\n        if (typeof description === 'string') {\n          achievementDescription = description;\n        }\n      }\n\n      // Handle achievement image\n      let achievementImage = '';\n      if (\n        typeof achievement === 'object' &&\n        !Array.isArray(achievement) &&\n        'image' in achievement\n      ) {\n        const image = achievement.image;\n        if (typeof image === 'string') {\n          achievementImage = image;\n        } else if (typeof image === 'object' && image && 'id' in image) {\n          achievementImage = image.id as string;\n        }\n      }\n\n      // Handle issuer information\n      let issuerName = 'Unknown Issuer';\n      let issuerUrl: string | undefined;\n      let issuerImage: string | undefined;\n\n      if (typeof issuer === 'object') {\n        if ('name' in issuer) {\n          const name = issuer.name;\n          issuerName = typeof name === 'string' ? name : 'Unknown Issuer';\n        }\n\n        if ('url' in issuer) {\n          issuerUrl = issuer.url as string;\n        }\n\n        if ('image' in issuer) {\n          const image = issuer.image;\n          if (typeof image === 'string') {\n            issuerImage = image;\n          } else if (typeof image === 'object' && image && 'id' in image) {\n            issuerImage = image.id as string;\n          }\n        }\n      }\n\n      return {\n        id: badge.id as string,\n        name: achievementName,\n        description: achievementDescription,\n        image: achievementImage,\n        issuer: {\n          name: issuerName,\n          url: issuerUrl,\n          image: issuerImage,\n        },\n        issuedOn: badge.issuanceDate as string,\n        expires: badge.expirationDate as string | undefined,\n      };\n    }\n\n    // Fallback for unknown format\n    return {\n      id: 'unknown',\n      name: 'Unknown Badge',\n      description: 'Badge format not recognized',\n      image: '',\n      issuer: {\n        name: 'Unknown Issuer',\n      },\n      issuedOn: new Date().toISOString(),\n    };\n  }\n}\n"],"names":["uuidv4"],"mappings":"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"}