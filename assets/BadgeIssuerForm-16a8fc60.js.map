{"version":3,"file":"BadgeIssuerForm-16a8fc60.js","sources":["../../src/composables/useBadgeIssuer.ts"],"sourcesContent":["// src/composables/useBadgeIssuer.ts\nimport { reactive, computed } from 'vue';\nimport type { ComputedRef } from 'vue';\nimport type { OB2 } from '@/types';\nimport { BadgeService } from '@services/BadgeService';\n\nexport interface BadgeIssuerState {\n  // Badge Class fields\n  badgeClass: OB2.BadgeClass;\n  // Recipient fields\n  recipientEmail: string;\n  // Form state\n  isSubmitting: boolean;\n  errors: string[];\n  success: boolean;\n}\n\n/**\n * Composable for badge issuance functionality\n * Provides reactive state and methods for creating and issuing badges\n */\nexport function useBadgeIssuer(): {\n  state: BadgeIssuerState;\n  isValid: ComputedRef<boolean>;\n  resetForm: () => void;\n  validateForm: () => boolean;\n  issueBadge: () => Promise<OB2.Assertion | null>;\n} {\n  // Initialize state with default values\n  const state = reactive<BadgeIssuerState>({\n    badgeClass: BadgeService.createBadgeClassTemplate(),\n    recipientEmail: '',\n    isSubmitting: false,\n    errors: [],\n    success: false,\n  });\n\n  // Computed properties\n  const isValid = computed(() => {\n    const badgeClassErrors = BadgeService.validateBadgeClass(state.badgeClass);\n    return badgeClassErrors.length === 0 && !!state.recipientEmail;\n  });\n\n  // Methods\n  const resetForm = () => {\n    state.badgeClass = BadgeService.createBadgeClassTemplate();\n    state.recipientEmail = '';\n    state.errors = [];\n    state.success = false;\n  };\n\n  const validateForm = (): boolean => {\n    state.errors = [];\n\n    // Validate badge class\n    const badgeClassErrors = BadgeService.validateBadgeClass(state.badgeClass);\n    state.errors.push(...badgeClassErrors);\n\n    // Validate recipient email\n    if (!state.recipientEmail) {\n      state.errors.push('Recipient email is required');\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(state.recipientEmail)) {\n      state.errors.push('Invalid email format');\n    }\n\n    return state.errors.length === 0;\n  };\n\n  const issueBadge = async (): Promise<OB2.Assertion | null> => {\n    state.isSubmitting = true;\n    state.errors = [];\n    state.success = false;\n\n    try {\n      if (!validateForm()) {\n        state.isSubmitting = false;\n        return null;\n      }\n\n      // Create assertion from badge class and recipient\n      const assertion = BadgeService.createAssertionTemplate(\n        state.badgeClass,\n        state.recipientEmail\n      );\n\n      // In a real implementation, this would likely call an API\n      // For now, we just return the created assertion\n\n      state.success = true;\n      return assertion;\n    } catch (error) {\n      if (error instanceof Error) {\n        state.errors.push(error.message);\n      } else {\n        state.errors.push('An unknown error occurred');\n      }\n      return null;\n    } finally {\n      state.isSubmitting = false;\n    }\n  };\n\n  // Return state and methods\n  return {\n    state,\n    isValid,\n    resetForm,\n    validateForm,\n    issueBadge,\n  };\n}\n"],"names":[],"mappings":";;;;AAqBO,SAAS,iBAMd;AAEA,QAAM,QAAQ,SAA2B;AAAA,IACvC,YAAY,aAAa,yBAAyB;AAAA,IAClD,gBAAgB;AAAA,IAChB,cAAc;AAAA,IACd,QAAQ,CAAC;AAAA,IACT,SAAS;AAAA,EAAA,CACV;AAGK,QAAA,UAAU,SAAS,MAAM;AAC7B,UAAM,mBAAmB,aAAa,mBAAmB,MAAM,UAAU;AACzE,WAAO,iBAAiB,WAAW,KAAK,CAAC,CAAC,MAAM;AAAA,EAAA,CACjD;AAGD,QAAM,YAAY,MAAM;AAChB,UAAA,aAAa,aAAa;AAChC,UAAM,iBAAiB;AACvB,UAAM,SAAS;AACf,UAAM,UAAU;AAAA,EAAA;AAGlB,QAAM,eAAe,MAAe;AAClC,UAAM,SAAS;AAGf,UAAM,mBAAmB,aAAa,mBAAmB,MAAM,UAAU;AACnE,UAAA,OAAO,KAAK,GAAG,gBAAgB;AAGjC,QAAA,CAAC,MAAM,gBAAgB;AACnB,YAAA,OAAO,KAAK,6BAA6B;AAAA,eACtC,CAAC,6BAA6B,KAAK,MAAM,cAAc,GAAG;AAC7D,YAAA,OAAO,KAAK,sBAAsB;AAAA,IAC1C;AAEO,WAAA,MAAM,OAAO,WAAW;AAAA,EAAA;AAGjC,QAAM,aAAa,YAA2C;AAC5D,UAAM,eAAe;AACrB,UAAM,SAAS;AACf,UAAM,UAAU;AAEZ,QAAA;AACE,UAAA,CAAC,gBAAgB;AACnB,cAAM,eAAe;AACd,eAAA;AAAA,MACT;AAGA,YAAM,YAAY,aAAa;AAAA,QAC7B,MAAM;AAAA,QACN,MAAM;AAAA,MAAA;AAMR,YAAM,UAAU;AACT,aAAA;AAAA,aACA,OAAO;AACd,UAAI,iBAAiB,OAAO;AACpB,cAAA,OAAO,KAAK,MAAM,OAAO;AAAA,MAAA,OAC1B;AACC,cAAA,OAAO,KAAK,2BAA2B;AAAA,MAC/C;AACO,aAAA;AAAA,IAAA,UACP;AACA,YAAM,eAAe;AAAA,IACv}