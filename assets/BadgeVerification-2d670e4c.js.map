{"version":3,"file":"BadgeVerification-2d670e4c.js","sources":["../../src/services/BadgeVerificationService.ts","../../src/composables/useBadgeVerification.ts","../../src/services/AccessibilityService.ts"],"sourcesContent":["// src/services/BadgeVerificationService.ts\nimport type { OB2, OB3 } from '@/types';\nimport { validateBadge, isBadge, isOB2Profile } from 'openbadges-types';\nimport {\n  isOB2Assertion,\n  isOB3VerifiableCredential,\n  OB2Guards,\n  OB3Guards,\n} from '@utils/type-helpers';\n\n/**\n * Result of a badge verification operation\n */\nexport interface VerificationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  verificationMethod?: 'hosted' | 'signed';\n  expirationStatus?: 'valid' | 'expired' | 'not-applicable';\n  revocationStatus?: 'valid' | 'revoked' | 'unknown';\n  badgeVersion?: 'OB2' | 'OB3';\n  structureValidation: {\n    isValid: boolean;\n    errors: string[];\n    warnings: string[];\n  };\n  contentValidation: {\n    isValid: boolean;\n    errors: string[];\n    warnings: string[];\n  };\n}\n\n/**\n * Service for verifying badge authenticity\n */\nexport class BadgeVerificationService {\n  /**\n   * Verifies a badge assertion\n   * @param badge The badge to verify\n   * @returns Verification result\n   */\n  static async verifyBadge(\n    badge: OB2.Assertion | OB3.VerifiableCredential\n  ): Promise<VerificationResult> {\n    // Initialize result\n    const result: VerificationResult = {\n      isValid: false,\n      errors: [],\n      warnings: [],\n      structureValidation: {\n        isValid: false,\n        errors: [],\n        warnings: [],\n      },\n      contentValidation: {\n        isValid: false,\n        errors: [],\n        warnings: [],\n      },\n    };\n\n    try {\n      // First, validate the badge structure using openbadges-types validation\n      const validationResult = validateBadge(badge);\n\n      // Store the validation results\n      result.structureValidation = {\n        isValid: validationResult.isValid,\n        errors: validationResult.errors,\n        warnings: validationResult.warnings,\n      };\n\n      // Set the badge version\n      result.badgeVersion = validationResult.version;\n\n      // If the badge structure is invalid, we can't proceed with further verification\n      if (!validationResult.isValid) {\n        result.errors.push('Badge structure validation failed');\n        result.errors = result.errors.concat(validationResult.errors);\n        result.warnings = result.warnings.concat(validationResult.warnings);\n        return result;\n      }\n\n      // Determine badge type and call appropriate verification method\n      if (isOB2Assertion(badge)) {\n        return await this.verifyOB2Badge(badge, result);\n      } else if (isOB3VerifiableCredential(badge)) {\n        return await this.verifyOB3Badge(badge, result);\n      } else {\n        result.errors.push('Unknown badge format');\n        return result;\n      }\n    } catch (error) {\n      result.errors.push(\n        `Verification error: ${error instanceof Error ? error.message : String(error)}`\n      );\n      return result;\n    }\n  }\n\n  /**\n   * Verifies an Open Badges 2.0 assertion\n   * @param badge The OB2 badge to verify\n   * @param result The verification result to update\n   * @returns Verification result\n   */\n  private static async verifyOB2Badge(\n    badge: OB2.Assertion,\n    result: VerificationResult\n  ): Promise<VerificationResult> {\n    // Set badge version\n    result.badgeVersion = 'OB2';\n\n    // Initialize content validation\n    result.contentValidation = {\n      isValid: true,\n      errors: [],\n      warnings: [],\n    };\n\n    // Perform detailed validation of badge components using type guards\n    this.validateOB2Components(badge, result);\n\n    // Check if badge has verification information\n    if (!badge.verification) {\n      result.contentValidation.errors.push('Badge is missing verification information');\n      result.contentValidation.isValid = false;\n    } else {\n      // Determine verification method\n      const verificationType =\n        typeof badge.verification.type === 'string'\n          ? badge.verification.type\n          : Array.isArray(badge.verification.type)\n          ? badge.verification.type[0]\n          : null;\n\n      if (!verificationType) {\n        result.contentValidation.errors.push('Badge has invalid verification type');\n        result.contentValidation.isValid = false;\n      } else {\n        // Normalize verification type (handle aliases)\n        const normalizedType = this.normalizeVerificationType(verificationType);\n        result.verificationMethod = normalizedType as 'hosted' | 'signed';\n\n        // Verify based on verification type\n        if (normalizedType === 'hosted') {\n          await this.verifyHostedBadge(badge, result);\n        } else if (normalizedType === 'signed') {\n          await this.verifySignedBadge(badge, result);\n        } else {\n          result.contentValidation.errors.push(\n            `Unsupported verification type: ${verificationType}`\n          );\n          result.contentValidation.isValid = false;\n        }\n      }\n    }\n\n    // Check expiration\n    this.checkExpiration(badge, result);\n\n    // Check revocation\n    await this.checkRevocation(badge, result);\n\n    // Update overall result based on content validation\n    if (!result.contentValidation.isValid) {\n      result.errors = result.errors.concat(result.contentValidation.errors);\n      result.warnings = result.warnings.concat(result.contentValidation.warnings);\n    }\n\n    // Badge is valid if both structure and content validations pass\n    result.isValid =\n      result.structureValidation?.isValid === true &&\n      result.contentValidation.isValid === true &&\n      result.errors.length === 0;\n    return result;\n  }\n\n  /**\n   * Validates the components of an OB2 badge using type guards\n   * @param badge The OB2 badge to validate\n   * @param result The verification result to update\n   */\n  private static validateOB2Components(badge: OB2.Assertion, result: VerificationResult): void {\n    // Validate badge class\n    if (typeof badge.badge === 'object') {\n      if (!isBadge(badge.badge)) {\n        result.contentValidation.errors.push('Invalid BadgeClass structure');\n        result.contentValidation.isValid = false;\n      } else {\n        // Validate badge class components\n        if (!badge.badge.name || badge.badge.name.trim() === '') {\n          result.contentValidation.errors.push('BadgeClass is missing a name');\n          result.contentValidation.isValid = false;\n        }\n\n        if (!badge.badge.description || badge.badge.description.trim() === '') {\n          result.contentValidation.errors.push('BadgeClass is missing a description');\n          result.contentValidation.isValid = false;\n        }\n\n        // Validate image\n        if (!badge.badge.image) {\n          result.contentValidation.errors.push('BadgeClass is missing an image');\n          result.contentValidation.isValid = false;\n        } else if (typeof badge.badge.image === 'object' && !OB2Guards.isImage(badge.badge.image)) {\n          result.contentValidation.errors.push('BadgeClass has an invalid image structure');\n          result.contentValidation.isValid = false;\n        }\n\n        // Validate criteria\n        if (badge.badge.criteria && !OB2Guards.isCriteria(badge.badge.criteria)) {\n          result.contentValidation.errors.push('BadgeClass has an invalid criteria structure');\n          result.contentValidation.isValid = false;\n        }\n\n        // Validate issuer\n        if (!badge.badge.issuer) {\n          result.contentValidation.errors.push('BadgeClass is missing an issuer');\n          result.contentValidation.isValid = false;\n        } else if (typeof badge.badge.issuer === 'object' && !isOB2Profile(badge.badge.issuer)) {\n          result.contentValidation.errors.push('BadgeClass has an invalid issuer structure');\n          result.contentValidation.isValid = false;\n        } else if (typeof badge.badge.issuer === 'object') {\n          // Validate issuer components\n          if (!badge.badge.issuer.name || badge.badge.issuer.name.trim() === '') {\n            result.contentValidation.errors.push('Issuer is missing a name');\n            result.contentValidation.isValid = false;\n          }\n\n          // Validate issuer URL if present\n          if (badge.badge.issuer.url && typeof badge.badge.issuer.url === 'string') {\n            try {\n              new URL(badge.badge.issuer.url);\n            } catch (e) {\n              result.contentValidation.errors.push('Issuer has an invalid URL');\n              result.contentValidation.isValid = false;\n            }\n          }\n        }\n\n        // Validate alignment if present\n        if (badge.badge.alignment) {\n          if (Array.isArray(badge.badge.alignment)) {\n            for (const alignment of badge.badge.alignment) {\n              if (!OB2Guards.isAlignmentObject(alignment)) {\n                result.contentValidation.errors.push(\n                  'BadgeClass has an invalid alignment structure'\n                );\n                result.contentValidation.isValid = false;\n                break;\n              }\n            }\n          } else if (!OB2Guards.isAlignmentObject(badge.badge.alignment)) {\n            result.contentValidation.errors.push('BadgeClass has an invalid alignment structure');\n            result.contentValidation.isValid = false;\n          }\n        }\n      }\n    } else if (typeof badge.badge === 'string') {\n      // If badge is a string reference, it should be a valid URL\n      try {\n        new URL(badge.badge);\n      } catch (e) {\n        result.contentValidation.errors.push('BadgeClass reference is not a valid URL');\n        result.contentValidation.isValid = false;\n      }\n    } else {\n      result.contentValidation.errors.push('Badge is missing a BadgeClass');\n      result.contentValidation.isValid = false;\n    }\n\n    // Validate recipient\n    if (!badge.recipient) {\n      result.contentValidation.errors.push('Badge is missing a recipient');\n      result.contentValidation.isValid = false;\n    } else if (!OB2Guards.isIdentityObject(badge.recipient)) {\n      result.contentValidation.errors.push('Badge has an invalid recipient structure');\n      result.contentValidation.isValid = false;\n    } else {\n      // Validate recipient components\n      if (!badge.recipient.identity) {\n        result.contentValidation.errors.push('Recipient is missing an identity');\n        result.contentValidation.isValid = false;\n      }\n\n      if (!badge.recipient.type) {\n        result.contentValidation.errors.push('Recipient is missing a type');\n        result.contentValidation.isValid = false;\n      }\n\n      if (badge.recipient.hashed === undefined) {\n        result.contentValidation.warnings.push('Recipient is missing the hashed property');\n      }\n    }\n\n    // Validate verification\n    if (!badge.verification) {\n      result.contentValidation.errors.push('Badge is missing verification information');\n      result.contentValidation.isValid = false;\n    } else if (!OB2Guards.isVerificationObject(badge.verification)) {\n      result.contentValidation.errors.push('Badge has an invalid verification structure');\n      result.contentValidation.isValid = false;\n    }\n\n    // Validate issuedOn\n    if (!badge.issuedOn) {\n      result.contentValidation.errors.push('Badge is missing an issuedOn date');\n      result.contentValidation.isValid = false;\n    } else {\n      try {\n        new Date(badge.issuedOn as string);\n      } catch (e) {\n        result.contentValidation.errors.push('Badge has an invalid issuedOn date');\n        result.contentValidation.isValid = false;\n      }\n    }\n\n    // Validate evidence if present\n    if (badge.evidence) {\n      if (Array.isArray(badge.evidence)) {\n        for (const evidence of badge.evidence) {\n          if (typeof evidence === 'object' && !OB2Guards.isEvidence(evidence)) {\n            result.contentValidation.errors.push('Badge has an invalid evidence structure');\n            result.contentValidation.isValid = false;\n            break;\n          }\n        }\n      } else if (typeof badge.evidence === 'object' && !OB2Guards.isEvidence(badge.evidence)) {\n        result.contentValidation.errors.push('Badge has an invalid evidence structure');\n        result.contentValidation.isValid = false;\n      }\n    }\n  }\n\n  /**\n   * Verifies an Open Badges 3.0 verifiable credential\n   * @param badge The OB3 badge to verify\n   * @param result The verification result to update\n   * @returns Verification result\n   */\n  private static async verifyOB3Badge(\n    badge: OB3.VerifiableCredential,\n    result: VerificationResult\n  ): Promise<VerificationResult> {\n    // Set badge version\n    result.badgeVersion = 'OB3';\n\n    // Initialize content validation\n    result.contentValidation = {\n      isValid: true,\n      errors: [],\n      warnings: [],\n    };\n\n    // Perform detailed validation of badge components using type guards\n    this.validateOB3Components(badge, result);\n\n    // OB3 uses the W3C Verifiable Credentials model\n    // Check for proof property which is required for verification\n    if (!badge.proof) {\n      result.contentValidation.errors.push('OB3 credential is missing proof information');\n      result.contentValidation.isValid = false;\n    } else {\n      // Determine proof type\n      const proofType = badge.proof.type;\n      if (!proofType) {\n        result.contentValidation.errors.push('OB3 credential has invalid proof type');\n        result.contentValidation.isValid = false;\n      } else {\n        // Currently, we'll add a warning as full cryptographic verification\n        // of OB3 credentials requires additional libraries and is complex\n        result.contentValidation.warnings.push(\n          'Full cryptographic verification of OB3 credentials is not yet implemented'\n        );\n        result.verificationMethod = 'signed';\n\n        // Validate proof components\n        if (!OB3Guards.isProof(badge.proof)) {\n          result.contentValidation.errors.push('OB3 credential has an invalid proof structure');\n          result.contentValidation.isValid = false;\n        } else {\n          // Check required proof properties\n          if (!badge.proof.created) {\n            result.contentValidation.errors.push('Proof is missing a creation date');\n            result.contentValidation.isValid = false;\n          }\n\n          if (!badge.proof.verificationMethod) {\n            result.contentValidation.errors.push('Proof is missing a verification method');\n            result.contentValidation.isValid = false;\n          }\n\n          if (!badge.proof.proofPurpose) {\n            result.contentValidation.errors.push('Proof is missing a proof purpose');\n            result.contentValidation.isValid = false;\n          }\n\n          if (!badge.proof.proofValue) {\n            result.contentValidation.errors.push('Proof is missing a proof value');\n            result.contentValidation.isValid = false;\n          }\n        }\n      }\n    }\n\n    // Check expiration\n    this.checkExpiration(badge, result);\n\n    // Check credential status if present\n    if (badge.credentialStatus) {\n      if (!OB3Guards.isCredentialStatus(badge.credentialStatus)) {\n        result.contentValidation.errors.push(\n          'OB3 credential has an invalid credential status structure'\n        );\n        result.contentValidation.isValid = false;\n      } else {\n        // Check required credential status properties\n        if (!badge.credentialStatus.id) {\n          result.contentValidation.errors.push('Credential status is missing an ID');\n          result.contentValidation.isValid = false;\n        }\n\n        if (!badge.credentialStatus.type) {\n          result.contentValidation.errors.push('Credential status is missing a type');\n          result.contentValidation.isValid = false;\n        }\n\n        // Add a warning about credential status checking\n        result.contentValidation.warnings.push(\n          'Credential status checking requires network access to validate against the status endpoint'\n        );\n      }\n    } else {\n      // Add a warning about missing credential status\n      result.contentValidation.warnings.push('OB3 credential does not specify a credential status');\n    }\n\n    // Update overall result based on content validation\n    if (!result.contentValidation.isValid) {\n      result.errors = result.errors.concat(result.contentValidation.errors);\n      result.warnings = result.warnings.concat(result.contentValidation.warnings);\n    }\n\n    // Badge is valid if both structure and content validations pass\n    result.isValid =\n      result.structureValidation?.isValid === true &&\n      result.contentValidation.isValid === true &&\n      result.errors.length === 0;\n    return result;\n  }\n\n  /**\n   * Validates the components of an OB3 badge using type guards\n   * @param badge The OB3 badge to validate\n   * @param result The verification result to update\n   */\n  private static validateOB3Components(\n    badge: OB3.VerifiableCredential,\n    result: VerificationResult\n  ): void {\n    // Validate context\n    if (!badge['@context'] || !Array.isArray(badge['@context'])) {\n      result.contentValidation.errors.push('OB3 credential is missing a valid context');\n      result.contentValidation.isValid = false;\n    } else {\n      // Check for required contexts\n      const hasW3CContext = badge['@context'].some(\n        (ctx) =>\n          ctx === 'https://www.w3.org/2018/credentials/v1' ||\n          ctx === 'https://w3id.org/credentials/v1'\n      );\n\n      const hasOB3Context = badge['@context'].some(\n        (ctx) =>\n          ctx === 'https://purl.imsglobal.org/spec/ob/v3p0/context.json' ||\n          ctx === 'https://w3id.org/openbadges/v3'\n      );\n\n      if (!hasW3CContext) {\n        result.contentValidation.errors.push(\n          'OB3 credential is missing the W3C Verifiable Credentials context'\n        );\n        result.contentValidation.isValid = false;\n      }\n\n      if (!hasOB3Context) {\n        result.contentValidation.errors.push(\n          'OB3 credential is missing the Open Badges v3 context'\n        );\n        result.contentValidation.isValid = false;\n      }\n    }\n\n    // Validate type\n    if (!badge.type || !Array.isArray(badge.type)) {\n      result.contentValidation.errors.push('OB3 credential is missing a valid type');\n      result.contentValidation.isValid = false;\n    } else {\n      // Check for required types\n      const hasVCType = badge.type.includes('VerifiableCredential');\n      const hasOBType = badge.type.includes('OpenBadgeCredential');\n\n      if (!hasVCType) {\n        result.contentValidation.errors.push(\n          'OB3 credential is missing the VerifiableCredential type'\n        );\n        result.contentValidation.isValid = false;\n      }\n\n      if (!hasOBType) {\n        result.contentValidation.errors.push(\n          'OB3 credential is missing the OpenBadgeCredential type'\n        );\n        result.contentValidation.isValid = false;\n      }\n    }\n\n    // Validate issuer\n    if (!badge.issuer) {\n      result.contentValidation.errors.push('OB3 credential is missing an issuer');\n      result.contentValidation.isValid = false;\n    } else if (!OB3Guards.isIssuer(badge.issuer)) {\n      result.contentValidation.errors.push('OB3 credential has an invalid issuer structure');\n      result.contentValidation.isValid = false;\n    } else {\n      // Validate issuer components\n      if (!badge.issuer.id) {\n        result.contentValidation.errors.push('Issuer is missing an ID');\n        result.contentValidation.isValid = false;\n      }\n\n      if (!badge.issuer.type) {\n        result.contentValidation.errors.push('Issuer is missing a type');\n        result.contentValidation.isValid = false;\n      }\n\n      if (!badge.issuer.name) {\n        result.contentValidation.warnings.push('Issuer is missing a name');\n      }\n    }\n\n    // Validate issuance date\n    if (!badge.issuanceDate) {\n      result.contentValidation.errors.push('OB3 credential is missing an issuance date');\n      result.contentValidation.isValid = false;\n    } else {\n      try {\n        new Date(badge.issuanceDate as string);\n      } catch (e) {\n        result.contentValidation.errors.push('OB3 credential has an invalid issuance date');\n        result.contentValidation.isValid = false;\n      }\n    }\n\n    // Validate credential subject\n    if (!badge.credentialSubject) {\n      result.contentValidation.errors.push('OB3 credential is missing a credential subject');\n      result.contentValidation.isValid = false;\n    } else if (!OB3Guards.isCredentialSubject(badge.credentialSubject)) {\n      result.contentValidation.errors.push(\n        'OB3 credential has an invalid credential subject structure'\n      );\n      result.contentValidation.isValid = false;\n    } else {\n      // Validate credential subject components\n      if (!badge.credentialSubject.type) {\n        result.contentValidation.errors.push('Credential subject is missing a type');\n        result.contentValidation.isValid = false;\n      }\n\n      // Validate achievement\n      if (!badge.credentialSubject.achievement) {\n        result.contentValidation.errors.push('Credential subject is missing an achievement');\n        result.contentValidation.isValid = false;\n      } else if (!OB3Guards.isAchievement(badge.credentialSubject.achievement)) {\n        result.contentValidation.errors.push(\n          'Credential subject has an invalid achievement structure'\n        );\n        result.contentValidation.isValid = false;\n      } else {\n        // Validate achievement components\n        if (!badge.credentialSubject.achievement.id) {\n          result.contentValidation.errors.push('Achievement is missing an ID');\n          result.contentValidation.isValid = false;\n        }\n\n        if (!badge.credentialSubject.achievement.type) {\n          result.contentValidation.errors.push('Achievement is missing a type');\n          result.contentValidation.isValid = false;\n        }\n\n        if (!badge.credentialSubject.achievement.name) {\n          result.contentValidation.errors.push('Achievement is missing a name');\n          result.contentValidation.isValid = false;\n        }\n\n        // Validate criteria if present\n        if (\n          badge.credentialSubject.achievement.criteria &&\n          !OB3Guards.isCriteria(badge.credentialSubject.achievement.criteria)\n        ) {\n          result.contentValidation.errors.push('Achievement has an invalid criteria structure');\n          result.contentValidation.isValid = false;\n        }\n\n        // Validate image if present\n        if (badge.credentialSubject.achievement.image) {\n          if (\n            typeof badge.credentialSubject.achievement.image === 'object' &&\n            (!badge.credentialSubject.achievement.image.id ||\n              !badge.credentialSubject.achievement.image.type)\n          ) {\n            result.contentValidation.errors.push('Achievement has an invalid image structure');\n            result.contentValidation.isValid = false;\n          }\n        } else {\n          result.contentValidation.warnings.push('Achievement is missing an image');\n        }\n      }\n    }\n\n    // Validate refresh service if present\n    if (badge.refreshService && !OB3Guards.isRefreshService(badge.refreshService)) {\n      result.contentValidation.errors.push(\n        'OB3 credential has an invalid refresh service structure'\n      );\n      result.contentValidation.isValid = false;\n    }\n\n    // Validate terms of use if present\n    if (badge.termsOfUse) {\n      if (Array.isArray(badge.termsOfUse)) {\n        for (const terms of badge.termsOfUse) {\n          if (!OB3Guards.isTermsOfUse(terms)) {\n            result.contentValidation.errors.push(\n              'OB3 credential has an invalid terms of use structure'\n            );\n            result.contentValidation.isValid = false;\n            break;\n          }\n        }\n      } else if (!OB3Guards.isTermsOfUse(badge.termsOfUse)) {\n        result.contentValidation.errors.push(\n          'OB3 credential has an invalid terms of use structure'\n        );\n        result.contentValidation.isValid = false;\n      }\n    }\n\n    // Validate evidence if present\n    if (badge.evidence) {\n      if (Array.isArray(badge.evidence)) {\n        for (const evidence of badge.evidence) {\n          if (!OB3Guards.isEvidence(evidence)) {\n            result.contentValidation.errors.push(\n              'OB3 credential has an invalid evidence structure'\n            );\n            result.contentValidation.isValid = false;\n            break;\n          }\n        }\n      } else if (!OB3Guards.isEvidence(badge.evidence)) {\n        result.contentValidation.errors.push('OB3 credential has an invalid evidence structure');\n        result.contentValidation.isValid = false;\n      }\n    }\n  }\n\n  /**\n   * Verifies a hosted badge by checking if it's accessible at its ID URL\n   * @param badge The badge to verify\n   * @param result The verification result to update\n   */\n  private static async verifyHostedBadge(\n    badge: OB2.Assertion,\n    result: VerificationResult\n  ): Promise<void> {\n    // For hosted verification, the badge should be accessible at its ID URL\n    if (!badge.id || typeof badge.id !== 'string' || !badge.id.startsWith('http')) {\n      result.contentValidation.errors.push('Hosted badge must have an HTTP(S) ID URL');\n      result.contentValidation.isValid = false;\n      return;\n    }\n\n    // In a browser environment, we would fetch the badge from its ID URL\n    // and compare it with the current badge\n    // For this implementation, we'll simulate this process\n    result.contentValidation.warnings.push(\n      'Hosted badge verification requires network access to validate against the hosted assertion'\n    );\n\n    // In a real implementation, we would:\n    // 1. Fetch the badge from its ID URL\n    // 2. Compare the fetched badge with the current badge\n    // 3. Check if the issuer is authorized to issue this badge\n\n    // For now, we'll assume the badge is valid if it has an HTTP ID\n    // This is a simplified implementation\n  }\n\n  /**\n   * Verifies a signed badge by checking its signature\n   * @param badge The badge to verify\n   * @param result The verification result to update\n   */\n  private static async verifySignedBadge(\n    badge: OB2.Assertion,\n    result: VerificationResult\n  ): Promise<void> {\n    // For signed verification, the badge should have a signature that can be verified\n    // using the issuer's public key\n\n    // Check if the badge has a creator property in its verification object\n    // which points to the key used to sign the badge\n    const verification = badge.verification;\n    if (!verification.creator && typeof badge.badge === 'object' && badge.badge.issuer) {\n      // If no creator is specified, we need to check the issuer's profile for public keys\n      result.contentValidation.warnings.push(\n        'Signed badge does not specify which key was used for signing'\n      );\n    }\n\n    // In a real implementation, we would:\n    // 1. Get the public key from the issuer's profile\n    // 2. Verify the signature using the public key\n    // 3. Check if the issuer is authorized to issue this badge\n\n    // For now, we'll add a warning as full signature verification\n    // requires additional libraries and is complex\n    result.contentValidation.warnings.push(\n      'Full signature verification requires cryptographic libraries'\n    );\n  }\n\n  /**\n   * Checks if a badge has expired\n   * @param badge The badge to check\n   * @param result The verification result to update\n   */\n  private static checkExpiration(\n    badge: OB2.Assertion | OB3.VerifiableCredential,\n    result: VerificationResult\n  ): void {\n    // Check if the badge has an expiration date\n    const expirationDate = isOB2Assertion(badge) ? badge.expires : badge.expirationDate;\n\n    if (expirationDate) {\n      const expDate = new Date(expirationDate as string);\n      const now = new Date();\n\n      if (expDate < now) {\n        result.expirationStatus = 'expired';\n        result.contentValidation.errors.push('Badge has expired');\n        result.contentValidation.isValid = false;\n      } else {\n        result.expirationStatus = 'valid';\n      }\n    } else {\n      result.expirationStatus = 'not-applicable';\n    }\n  }\n\n  /**\n   * Checks if a badge has been revoked\n   * @param badge The badge to check\n   * @param result The verification result to update\n   */\n  private static async checkRevocation(\n    badge: OB2.Assertion | OB3.VerifiableCredential,\n    result: VerificationResult\n  ): Promise<void> {\n    // For OB2 badges, check the revoked property\n    if (isOB2Assertion(badge)) {\n      if (badge.revoked === true) {\n        result.revocationStatus = 'revoked';\n        result.contentValidation.errors.push(\n          badge.revocationReason\n            ? `Badge has been revoked: ${badge.revocationReason}`\n            : 'Badge has been revoked'\n        );\n        result.contentValidation.isValid = false;\n        return;\n      }\n\n      // For hosted badges, a 410 Gone response would indicate revocation\n      // For signed badges, we would need to check the issuer's revocation list\n\n      // If the badge has an issuer with a revocationList, we should check it\n      // This would require network access in a real implementation\n\n      result.revocationStatus = 'valid';\n      return;\n    }\n\n    // For OB3 badges, check the credentialStatus property\n    if (badge.credentialStatus) {\n      // In a real implementation, we would check the credential status endpoint\n      // This would require network access\n      result.contentValidation.warnings.push('Credential status checking requires network access');\n      result.revocationStatus = 'unknown';\n    } else {\n      // If no credential status is provided, we can't determine revocation status\n      result.revocationStatus = 'unknown';\n      result.contentValidation.warnings.push(\n        'Revocation checking for OB3 credentials is not fully implemented'\n      );\n    }\n  }\n\n  /**\n   * Normalizes verification type to handle aliases\n   * @param type The verification type to normalize\n   * @returns Normalized verification type\n   */\n  private static normalizeVerificationType(type: string): string {\n    // Handle aliases defined in the OB2 context\n    switch (type.toLowerCase()) {\n      case 'hosted':\n      case 'hostedbadge':\n        return 'hosted';\n      case 'signed':\n      case 'signedbadge':\n        return 'signed';\n      default:\n        return type;\n    }\n  }\n}\n","// src/composables/useBadgeVerification.ts\nimport { ref, computed } from 'vue';\nimport type { Ref, ComputedRef } from 'vue';\nimport type { OB2, OB3 } from '@/types';\nimport {\n  BadgeVerificationService,\n  type VerificationResult,\n} from '@services/BadgeVerificationService';\n\n/**\n * State for badge verification\n */\nexport interface BadgeVerificationState {\n  isVerifying: boolean;\n  lastVerified: Date | null;\n  result: VerificationResult | null;\n  badge: OB2.Assertion | OB3.VerifiableCredential | null;\n}\n\ninterface UseBadgeVerificationReturn {\n  state: Ref<BadgeVerificationState>;\n  isValid: ComputedRef<boolean>;\n  errors: ComputedRef<string[]>;\n  warnings: ComputedRef<string[]>;\n  verificationMethod: ComputedRef<string | undefined>;\n  expirationStatus: ComputedRef<string | undefined>;\n  revocationStatus: ComputedRef<string | undefined>;\n  hasBeenVerified: ComputedRef<boolean>;\n  verifyBadge: (badge: OB2.Assertion | OB3.VerifiableCredential) => Promise<VerificationResult>;\n  clearVerification: () => void;\n}\n\n/**\n * Composable for badge verification functionality\n * Provides reactive state and methods for verifying badges\n */\nexport function useBadgeVerification(): UseBadgeVerificationReturn {\n  // Initialize state\n  const state = ref<BadgeVerificationState>({\n    isVerifying: false,\n    lastVerified: null,\n    result: null,\n    badge: null,\n  });\n\n  // Computed properties\n  const isValid = computed(() => state.value.result?.isValid ?? false);\n  const errors = computed(() => state.value.result?.errors ?? []);\n  const warnings = computed(() => state.value.result?.warnings ?? []);\n  const verificationMethod = computed(() => state.value.result?.verificationMethod);\n  const expirationStatus = computed(() => state.value.result?.expirationStatus);\n  const revocationStatus = computed(() => state.value.result?.revocationStatus);\n  const hasBeenVerified = computed(() => state.value.lastVerified !== null);\n\n  /**\n   * Verifies a badge\n   * @param badge The badge to verify\n   * @returns Verification result\n   */\n  const verifyBadge = async (\n    badge: OB2.Assertion | OB3.VerifiableCredential\n  ): Promise<VerificationResult> => {\n    state.value.isVerifying = true;\n    state.value.badge = badge;\n\n    try {\n      const result = await BadgeVerificationService.verifyBadge(badge);\n      state.value.result = result;\n      state.value.lastVerified = new Date();\n      return result;\n    } catch (error) {\n      const errorMessage = `Verification failed: ${\n        error instanceof Error ? error.message : String(error)\n      }`;\n      const errorResult: VerificationResult = {\n        isValid: false,\n        errors: [errorMessage],\n        warnings: [],\n        structureValidation: {\n          isValid: false,\n          errors: [errorMessage],\n          warnings: [],\n        },\n        contentValidation: {\n          isValid: false,\n          errors: [errorMessage],\n          warnings: [],\n        },\n      };\n      state.value.result = errorResult;\n      return errorResult;\n    } finally {\n      state.value.isVerifying = false;\n    }\n  };\n\n  /**\n   * Clears the verification state\n   */\n  const clearVerification = () => {\n    state.value = {\n      isVerifying: false,\n      lastVerified: null,\n      result: null,\n      badge: null,\n    };\n  };\n\n  return {\n    // State\n    state,\n\n    // Computed\n    isValid,\n    errors,\n    warnings,\n    verificationMethod,\n    expirationStatus,\n    revocationStatus,\n    hasBeenVerified,\n\n    // Methods\n    verifyBadge,\n    clearVerification,\n  };\n}\n","// src/services/AccessibilityService.ts\n/**\n * Utility service for accessibility-related functionality\n * with enhanced support for neurodiversity considerations\n */\nexport class AccessibilityService {\n  /**\n   * Generates accessible alt text for badge images\n   * @param badgeName The name of the badge\n   * @returns Formatted alt text\n   */\n  static generateBadgeAltText(badgeName: string): string {\n    return `Badge: ${badgeName}`;\n  }\n\n  /**\n   * Formats a date for display in an accessible way\n   * @param dateString ISO date string\n   * @returns Formatted date string\n   */\n  static formatDate(dateString: string): string {\n    try {\n      const date = new Date(dateString);\n      return new Intl.DateTimeFormat('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n      }).format(date);\n    } catch (e) {\n      return dateString;\n    }\n  }\n\n  /**\n   * Gets initials from a name for avatar placeholders\n   * @param name Full name\n   * @param maxLength Maximum number of characters to return\n   * @returns Uppercase initials\n   */\n  static getInitials(name: string, maxLength = 2): string {\n    return name\n      .split(' ')\n      .map((part) => part.charAt(0))\n      .join('')\n      .toUpperCase()\n      .substring(0, maxLength);\n  }\n\n  /**\n   * Truncates text with ellipsis if it exceeds maxLength\n   * @param text Text to truncate\n   * @param maxLength Maximum length before truncation\n   * @returns Truncated text with ellipsis if needed\n   */\n  static truncateText(text: string, maxLength: number): string {\n    if (text.length <= maxLength) {\n      return text;\n    }\n    return text.substring(0, maxLength) + '…';\n  }\n\n  /**\n   * Checks if a color has sufficient contrast against white or black\n   * Simple implementation - for production use a full WCAG contrast checker\n   * @param hexColor Hex color code (e.g., \"#3182ce\")\n   * @returns Whether the color likely has sufficient contrast\n   */\n  static hasGoodContrast(hexColor: string): boolean {\n    // Convert hex to RGB\n    const r = parseInt(hexColor.slice(1, 3), 16);\n    const g = parseInt(hexColor.slice(3, 5), 16);\n    const b = parseInt(hexColor.slice(5, 7), 16);\n\n    // Calculate relative luminance\n    const luminance = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n\n    // Return true if the color is likely to have good contrast\n    return luminance > 128;\n  }\n\n  /**\n   * Applies a theme to the document by adding a class to the body\n   * @param themeName Name of the theme to apply\n   */\n  static applyTheme(\n    themeName:\n      | 'default'\n      | 'dark'\n      | 'high-contrast'\n      | 'large-text'\n      | 'dyslexia-friendly'\n      | 'adhd-friendly'\n      | 'autism-friendly'\n  ): void {\n    // Remove any existing theme classes\n    document.body.classList.remove(\n      'ob-dark-theme',\n      'ob-high-contrast-theme',\n      'ob-large-text-theme',\n      'ob-dyslexia-friendly-theme',\n      'ob-adhd-friendly-theme',\n      'ob-autism-friendly-theme'\n    );\n\n    // Add the new theme class if not default\n    if (themeName !== 'default') {\n      document.body.classList.add(`ob-${themeName}-theme`);\n    }\n  }\n\n  /**\n   * Checks if reduced motion is preferred\n   * @returns Whether reduced motion is preferred\n   */\n  static prefersReducedMotion(): boolean {\n    return window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n  }\n\n  /**\n   * Simplifies text for better readability\n   * Useful for users with cognitive disabilities, dyslexia, or ADHD\n   * @param text The text to simplify\n   * @param level The level of simplification (1-3, where 3 is most simplified)\n   * @returns Simplified text\n   */\n  static simplifyText(text: string, level: 1 | 2 | 3 = 1): string {\n    // Basic implementation - in a real app, this would use more sophisticated NLP\n    if (level === 1) {\n      // Light simplification - replace complex words and shorten sentences\n      return text\n        .replace(/\\b(utilize|utilise)\\b/g, 'use')\n        .replace(/\\b(implement|implementation)\\b/g, 'use')\n        .replace(/\\b(additional)\\b/g, 'more')\n        .replace(/\\b(sufficient)\\b/g, 'enough')\n        .replace(/\\b(approximately)\\b/g, 'about')\n        .replace(/\\b(subsequently)\\b/g, 'later')\n        .replace(/\\b(nevertheless|nonetheless)\\b/g, 'however');\n    } else if (level === 2) {\n      // Medium simplification - also break up longer sentences\n      const simplified = text\n        .replace(/\\b(utilize|utilise)\\b/g, 'use')\n        .replace(/\\b(implement|implementation)\\b/g, 'use')\n        .replace(/\\b(additional)\\b/g, 'more')\n        .replace(/\\b(sufficient)\\b/g, 'enough')\n        .replace(/\\b(approximately)\\b/g, 'about')\n        .replace(/\\b(subsequently)\\b/g, 'later')\n        .replace(/\\b(nevertheless|nonetheless)\\b/g, 'however');\n\n      // Break up longer sentences (simple approach)\n      return simplified.replace(/([.!?])\\s+([A-Z])/g, '$1<br>$2');\n    } else {\n      // High simplification - also add visual breaks and simplify further\n      const simplified = text\n        .replace(/\\b(utilize|utilise)\\b/g, 'use')\n        .replace(/\\b(implement|implementation)\\b/g, 'use')\n        .replace(/\\b(additional)\\b/g, 'more')\n        .replace(/\\b(sufficient)\\b/g, 'enough')\n        .replace(/\\b(approximately)\\b/g, 'about')\n        .replace(/\\b(subsequently)\\b/g, 'later')\n        .replace(/\\b(nevertheless|nonetheless)\\b/g, 'however')\n        .replace(/\\b(therefore)\\b/g, 'so')\n        .replace(/\\b(regarding)\\b/g, 'about')\n        .replace(/\\b(concerning)\\b/g, 'about')\n        .replace(/\\b(accordingly)\\b/g, 'so');\n\n      // Break up sentences and add more visual spacing\n      return simplified.replace(/([.!?])\\s+([A-Z])/g, '$1<br><br>$2');\n    }\n  }\n\n  /**\n   * Sets content density preference\n   * Useful for users with ADHD, autism, or cognitive processing differences\n   * @param density The content density preference\n   */\n  static setContentDensity(density: 'compact' | 'normal' | 'spacious'): void {\n    // Remove any existing density classes\n    document.body.classList.remove(\n      'ob-density-compact',\n      'ob-density-normal',\n      'ob-density-spacious'\n    );\n\n    // Add the new density class\n    document.body.classList.add(`ob-density-${density}`);\n  }\n\n  /**\n   * Enables focus mode to reduce distractions\n   * Particularly helpful for users with ADHD\n   * @param enabled Whether focus mode is enabled\n   */\n  static setFocusMode(enabled: boolean): void {\n    if (enabled) {\n      document.body.classList.add('ob-focus-mode');\n    } else {\n      document.body.classList.remove('ob-focus-mode');\n    }\n  }\n\n  /**\n   * Controls animation and motion settings\n   * Important for users with vestibular disorders, autism, ADHD\n   * @param level The level of animation (none, minimal, full)\n   */\n  static setAnimationLevel(level: 'none' | 'minimal' | 'full'): void {\n    // Remove any existing animation classes\n    document.body.classList.remove(\n      'ob-animations-none',\n      'ob-animations-minimal',\n      'ob-animations-full'\n    );\n\n    // Add the new animation class\n    document.body.classList.add(`ob-animations-${level}`);\n  }\n\n  /**\n   * Sets reading mode for improved text readability\n   * Helpful for users with dyslexia, visual processing issues\n   * @param mode The reading mode to apply\n   */\n  static setReadingMode(mode: 'default' | 'bionic' | 'ruler' | 'paragraph-focus'): void {\n    // Remove any existing reading mode classes\n    document.body.classList.remove(\n      'ob-reading-bionic',\n      'ob-reading-ruler',\n      'ob-reading-paragraph-focus'\n    );\n\n    // Add the new reading mode class if not default\n    if (mode !== 'default') {\n      document.body.classList.add(`ob-reading-${mode}`);\n    }\n  }\n\n  /**\n   * Formats numbers in a way that's easier to read for people with dyscalculia\n   * @param value The number to format\n   * @param options Formatting options\n   * @returns Formatted number string\n   */\n  static formatNumber(\n    value: number,\n    options: {\n      useGrouping?: boolean;\n      addVisualSeparators?: boolean;\n      highlightDigits?: boolean;\n    } = {}\n  ): string {\n    const { useGrouping = true, addVisualSeparators = false, highlightDigits = false } = options;\n\n    // Format with locale and grouping\n    let formatted = value.toLocaleString(undefined, {\n      useGrouping,\n    });\n\n    // Add visual separators if requested\n    if (addVisualSeparators) {\n      formatted = formatted.replace(/,/g, '<span class=\"ob-number-separator\">,</span>');\n    }\n\n    // Highlight alternating digits if requested\n    if (highlightDigits) {\n      let result = '';\n      for (let i = 0; i < formatted.length; i++) {\n        const char = formatted[i];\n        if (/\\d/.test(char) && i % 2 === 0) {\n          result += `<span class=\"ob-number-highlight\">${char}</span>`;\n        } else {\n          result += char;\n        }\n      }\n      formatted = result;\n    }\n\n    return formatted;\n  }\n}\n"],"names":["isOB2Profile"],"mappings":"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"}